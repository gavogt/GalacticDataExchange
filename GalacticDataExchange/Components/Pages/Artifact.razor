@page "/artifact/{Id:guid}"

@using GalacticDataExchange.Shared
@using Microsoft.EntityFrameworkCore;

@inject DataDBContext DataDBContext
@inject NavigationManager NavigationManager
@inject SessionState SessionState

@if(_isLoading)
{
	<p class="text-white">Loading Artifact...</p>
}
else if (_artifact == null)
{
	<p class="text-white">Artifact not found.</p>
	<button class="btn btn-link mb-3" @onclick='() => NavigationManager.NavigateTo("/artifact-gallery")'>
		Back to Gallery
	</button>
}
else
{
	<button class="btn btn-link mb-3" @onclick='() => NavigationManager.NavigateTo("/artifact-gallery")'>
		Back to Gallery
	</button>

	<h2 class="text-white">@_artifact.Name</h2>
	<p class="text-white">@_artifact.DataArtifactType</p>

	@if (!string.IsNullOrWhiteSpace(_artifact.ImageURL))
	{
		<img src="@_artifact.ImageURL" class="img-fluid mb-3 rounded mb-3" style="max-height:300px;object-fit:cover" alt="@_artifact.Name" />
	}
	else if (!string.IsNullOrWhiteSpace(_artifact.VideoURL))
	{
		<video src="@_artifact.VideoURL"
			   class="img-fluid mb-3 rounded mb-3"
			   style="max-height:300px;object-fit:cover"
			   controls>
			Your browser does not support the video tag.
		</video>
	}

	<button class="btn btn-outline-primary" @onclick="Like">
		♥ @_artifact.Likes?.Count
	</button>
}

@code {
	[Parameter] public Guid Id { get; set; }
	private DataArtifact? _artifact;
	private bool _isLoading = true;

	protected override async Task OnInitializedAsync()
	{
		// Load the artifact by route ID
		_artifact = await DataDBContext.DataArtifacts
			.Include(a => a.Likes) // Eager load likes collection
			.FirstOrDefaultAsync(a => a.ID == Id); // filter by route parameter

			_isLoading = false;
	}

	public async Task Like()
	{
		if (_artifact == null) return;

		var user = SessionState?.CurrentUser;
		if (user?.Id == null) return;

		var exists = await DataDBContext.DataArtifactLikes
			.FirstOrDefaultAsync(Dal =>
				Dal.DataArtifactID == _artifact.ID &&
				Dal.UserID == user.Id);

		if (exists != null)
		{
			// User has already liked this artifact, do nothing
			return;
		}

		// Create a new Like record
		var like = new DataArtifactLike
			{
				DataArtifactID = _artifact.ID,
				UserID = user.Id,
				TimeStamp = DateTime.UtcNow
			};

		// Add the like to the DataArtifactLikes table
		DataDBContext.DataArtifactLikes.Add(like);

		// Commit the insert
		await DataDBContext.SaveChangesAsync();

		// Add like to in-memory likes
		_artifact.Likes?.Add(like);
	}


}