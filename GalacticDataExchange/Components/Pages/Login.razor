@page "/login"

@using GalacticDataExchange.Shared;
@using Microsoft.EntityFrameworkCore;

@inject NavigationManager NavigationManager
@inject DataDBContext DataDBContext
@inject AuthenticationService AuthenticationService

<EditForm Model="@_loginModel" OnValidSubmit="HandleLogin">
	<DataAnnotationsValidator />
	<div class="container my-5">
		<div class="row justify-content-center">
			<div class="col-md-6">
				<div class="card shadow-sm">
					<div class="card-header text-center">
						<img src="images/galacticlogo2.png" alt="Galactic Data Exchange logo" class="img-fluid logo-img mb-2" />
						<h5 class="card-title mb-0">Login</h5>
					</div>
					<div class="card-body">
						<div class="mb-3">
							<label for="email" class="form-label">Email</label>
							<InputText id="email" class="form-control" placeholder="Enter your email" @bind-Value="_loginModel.Email" />
							<ValidationMessage For="@(() => _loginModel.Email)" />
						</div>
						<div class="mb-3">
							<label for="password" class="form-label">Password</label>
							<InputText id="password" type="password" class="form-control" placeholder="Enter your password" @bind-Value="_loginModel.Password" />
							<ValidationMessage For="@(() => _loginModel.Password)" />
						</div>
						<button class="btn btn-primary rounded-pill">Submit</button>
					</div>
					@if (!string.IsNullOrEmpty(_errorMessage))
					{
						<div class="alert alert-danger" role="alert">
							<p>@_errorMessage</p>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
	<ValidationSummary />
</EditForm>

@code {

	private LoginInputModel _loginModel { get; set; } = new LoginInputModel();
	private string _errorMessage { get; set; } = String.Empty;
	private AuthenticationService? _authService { get; set; }

	[CascadingParameter]
	SessionState? SessionState { get; set; }


	private async Task HandleLogin()
	{
		if (!string.IsNullOrEmpty(_loginModel.Email) && !string.IsNullOrEmpty(_loginModel.Password))
		{

			_authService = new AuthenticationService(DataDBContext);
			bool isValidUser = await _authService.AutheticateUserAsync(_loginModel.Email, _loginModel.Password);

			if (isValidUser)
			{
				var user = await DataDBContext.Users.SingleOrDefaultAsync(u => u.Email == _loginModel.Email);

				if (user != null && SessionState != null)
				{
					SessionState.CurrentUser = user;

				}

				NavigationManager.NavigateTo("/user-dashboard");
			}
			else
			{
				_errorMessage = "Invalid email or password.";
			}
		}
	}
}
